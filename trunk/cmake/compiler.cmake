# determine TE_COMPILER
if (NOT TE_COMPILER)
  if (${CMAKE_SYSTEM_NAME} STREQUAL Linux)
    if (WATCOM)
      set (TE_COMPILER watcom)
    else ()
      set (TE_COMPILER gnu)
    endif ()
  endif ()
  if (${CMAKE_SYSTEM_NAME} STREQUAL FreeBSD)
    set (TE_COMPILER gnu)
  endif ()
  if (${CMAKE_SYSTEM_NAME} STREQUAL SunOS)
    set (TE_COMPILER suncc)
  endif ()
  if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    if (MINGW OR MSYS)
      set (TE_COMPILER gnu)
    else ()
      if (CYGWIN)
	set (TE_COMPILER gnu)
      else ()
	if (BORLAND)
	  set (TE_COMPILER borland)
	else ()
	  if (MSVC)
	    set (TE_COMPILER msvc)
	  else ()
	    if (WATCOM)
	      set (TE_COMPILER watcom)
	    endif ()
	  endif ()
	endif ()
      endif ()
    endif ()
  endif ()
endif ()
# =========================================
# gcc configuration
# =========================================
if (TE_COMPILER STREQUAL gnu)
  set (TE_WARNINGS -Wall -W -Wextra -Wconversion -Wno-long-long 
    -Wshadow  -Wpointer-arith -Wcast-qual  -Wcast-align -Wwrite-strings)
  set (TE_CXX_WARNINGS  -Wnon-virtual-dtor -fvisibility-inlines-hidden)
  set (TE_FLAGS  -pedantic -ansi -pipe -fno-common -fno-short-enums  -fvisibility=hidden)
  set (TE_DEFINITIONS "")
  if (optHAS_SYMBOLS)
    list (APPEND TE_FLAGS -g)
  endif ()
  if (optHAS_OPTIMIZED)
    list (APPEND TE_FLAGS -fomit-frame-pointer -O2)
  endif ()
  if (optBUILD_64BIT)
    list (APPEND TE_FLAGS -m64)
  endif ()
  if (optBUILD_STDCALL)
    list (APPEND TE_DEFINITIONS "-DTE_USE_STDCALL")
  endif ()
endif ()
# =========================================
# SunStudio configuration
# =========================================
if (TE_COMPILER STREQUAL suncc)
  list (APPEND TE_FLAGS "-xmemalign=ab")
endif ()
# =========================================
# Visual Studio configuration
# =========================================
if (TE_COMPILER STREQUAL msvc)
  set (TE_DEFINITIONS "/D_CRT_SECURE_NO_WARNINGS")
  
  if (optBUILD_STDCALL)
    set (TE_DEFINITIONS "${TE_DEFINITIONS} /DTE_USE_STDCALL")
  endif ()
  if (MSVC60)
	set (TE_WARNINGS /W3)
  else ()
	if (NOT MSVC90)
		set (TE_WARNINGS /W3 /Wp64)
	else ()
		set (TE_WARNINGS /W4)
	endif ()
  endif ()
  if (optHAS_SYMBOLS)
    list (APPEND TE_FLAGS /ZI)
	list (APPEND TE_DEFINITIONS "/D_DEBUG=1")
  endif ()
  if (optHAS_OPTIMIZED)
    list (APPEND TE_FLAGS /O2)
    list (APPEND TE_DEFINITIONS "/DNDEBUG")
  endif ()

  # determine code generation model
  if (optHAS_OPTIMIZED)
    if (optBUILD_DLL)
      list (APPEND TE_FLAGS /MD)
    else ()
      list (APPEND TE_FLAGS /MT)
    endif ()
  else ()
    if (optBUILD_DLL)
      list (APPEND TE_FLAGS /MDd)
    else ()
      list (APPEND TE_FLAGS /MTd)
    endif ()
  endif ()
endif ()
# =========================================
# Intel Compiler configuration
# =========================================
if (TE_COMPILER STREQUAL intel)
  set (TE_WARNINGS -Wall -Wcheck -Wp64 -wd981 -wd1419 -wd1418)
  set (TE_FLAGS    -ansi -pipe)
  set (TE_DEFINITIONS "")
  if (optHAS_SYMBOLS)
    list (APPEND TE_FLAGS -g)
  endif ()
  if (optHAS_OPTIMIZED)
    list (APPEND TE_FLAGS -fomit-frame-pointer -O3 -ip)
  endif ()
  if (optBUILD_64BIT)
    list (APPEND TE_FLAGS -m64)
  endif ()
  if (optBUILD_STDCALL)
    list (APPEND TE_DEFINITIONS "-DTE_USE_STDCALL")
  endif ()
endif ()

# =========================================
# Borland C configuration
# =========================================
if (TE_COMPILER STREQUAL borland)
  set (CMAKE_C_COMPILER   bcc32)
  set (CMAKE_CXX_COMPILER bcc32)
  
  set (TE_WARNINGS -w -wamb -wdef -wnod -wnak -wcln -wsig -wucp)
  set (TE_FLAGS    -pc -p- -H- -b -d -Hu-)
  set (TE_DEFINITIONS "")  
  if (optHAS_SYMBOLS)
    list (APPEND TE_FLAGS -v -y -R)
  endif ()
  if (optHAS_OPTIMIZED)
    list (APPEND TE_FLAGS -O2)
  endif ()
  if (optBUILD_64BIT)
	set (TE_DEFINITIONS "-D_WIN64")
  else ()
	set (TE_DEFINITIONS "-D_WIN32")
  endif ()	
endif ()
# =========================================
# Watcom C configuration
# =========================================
if (TE_COMPILER STREQUAL watcom)
  set (TE_DEFINITIONS "-DTE_STL_CONTAINER_REQUIRES_DEFAULT_CTOR")
  set (TE_WARNINGS -w2 -wx )
  set (TE_FLAGS    -q -fpi -fpi87 "-bt=nt" -zq -6r -mf)
  if (optHAS_SYMBOLS)
    list (APPEND TE_FLAGS -db -d2 )
  endif ()
  if (optHAS_OPTIMIZED)
    list (APPEND TE_FLAGS -ox -s -ors )
  endif ()
  if (optBUILD_64BIT)
#    list (APPEND TE_FLAGS -m64)
  endif ()
  
  if (optBUILD_STDCALL)
    set (TE_DEFINITIONS "${TE_DEFINITIONS} -DTE_USE_STDCALL")
  endif ()
  set (CMAKE_EXE_LINKER_FLAGS "-l=nt")
  set (CMAKE_SHARED_LINKER_FLAGS "-l=nt")
endif ()


# ============================================
# construct compiler flags
# ============================================
set (myC_FLAGS "")
set (myCXX_FLAGS "")
set (myDEFS "")

foreach (flag ${TE_FLAGS})
  set (myC_FLAGS "${myC_FLAGS} ${flag}")
endforeach ()

foreach (flag ${TE_WARNINGS})
  set (myC_FLAGS "${myC_FLAGS} ${flag}")
endforeach ()

foreach (flag ${TE_FLAGS})
  set (myCXX_FLAGS "${myCXX_FLAGS} ${flag}")
endforeach ()

foreach (flag ${TE_WARNINGS})
  set (myCXX_FLAGS "${myCXX_FLAGS} ${flag}")
endforeach ()

foreach (flag ${TE_CXX_WARNINGS})
  set (myCXX_FLAGS "${myCXX_FLAGS} ${flag}")
endforeach ()

foreach (flag ${TE_DEFINITIONS})
  set (myDEFS "${myDEFS} ${flag}")
endforeach ()
# =======================================================

if (${CMAKE_BUILD_TYPE} STREQUAL RelWithDebInfo)
  set (CMAKE_C_FLAGS_RELWITHDEBINFO   ${myC_FLAGS})
  set (CMAKE_CXX_FLAGS_RELWITHDEBINFO ${myCXX_FLAGS})
endif ()

if (${CMAKE_BUILD_TYPE} STREQUAL Release)
  set (CMAKE_C_FLAGS_RELEASE   ${myC_FLAGS})
  set (CMAKE_CXX_FLAGS_RELEASE ${myCXX_FLAGS})
endif ()

if (${CMAKE_BUILD_TYPE} STREQUAL DebugFull)
  set (CMAKE_C_FLAGS_DEBUGFULL   ${myC_FLAGS})
  set (CMAKE_CXX_FLAGS_DEBUGFULL ${myCXX_FLAGS})
endif ()

if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
  set (CMAKE_C_FLAGS_DEBUG   ${myC_FLAGS})
  set (CMAKE_CXX_FLAGS_DEBUG ${myCXX_FLAGS})
endif ()
